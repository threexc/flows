#!/bin/bash
# Parameterized bash script for building kernels with Laminar CI. The
# input parameters $KCONFIG_TYPE and $ARCH are passed as arguments to
# laminarc like so:
#
# laminarc queue kernel_build KCONFIG_TYPE=allyesconfig ARCH=arm
#
# Since laminar automatically makes parameters into environment
# variables, no check for ARCH is needed.

#TODO: Make this script actually work with non-x86 architectures

IMAGE_TYPE=

if [[ -d "$WORKSPACE/linux" ]]; then
    cd "$WORKSPACE/linux" && git pull
else
    cd "$WORKSPACE"
    git clone https://github.com/torvalds/linux.git
    cd linux
fi

rm .config

if [[ -n "$KCONFIG_TYPE" ]]; then
    echo "Setting up $KCONFIG_TYPE build"
    make "$KCONFIG_TYPE"
else
    echo "KCONFIG_TYPE not set, defaulting to 'defconfig'"
    make defconfig
fi

# For now, only interested in x86_64 and arm-based images
if [[ "${ARCH}" == "x86_64" ]]; then
    IMAGE_TYPE="bzImage"
else
    IMAGE_TYPE="uImage"
fi

echo "Building kernel using KCONFIG_TYPE=$KCONFIG_TYPE for ARCH=$ARCH. IMAGE_TYPE is '$IMAGE_TYPE'"
make -j$(nproc) "${IMAGE_TYPE}" | tee -a build.log

# get the result of make, not tee, and preserve it
RESULT="${PIPESTATUS[0]}"
RESULTSTR=

if [[ "${RESULT}" == 0 ]]; then
    RESULTSTR="PASS"
else
    RESULTSTR="FAIL"
fi

echo "RESULT: ${RESULTSTR}" >> "${ARCHIVE}"/build.summary
echo "ARCH: ${ARCH}" >> "${ARCHIVE}"/build.summary
echo "IMAGE_TYPE: ${IMAGE_TYPE}" >> "${ARCHIVE}"/build.summary
echo "KCONFIG_TYPE: ${KCONFIG_TYPE}" >> "${ARCHIVE}"/build.summary

cp build.log "${ARCHIVE}"/build.log
cp .config "${ARCHIVE}"/build.config

if [[ "${RESULT}" == 0 ]]; then
    cp arch/"${ARCH}"/boot/"${IMAGE_TYPE}" "${ARCHIVE}"
else
    echo "Build failed, so not copying kernel image to ${ARCHIVE}"
fi

exit $RESULT
