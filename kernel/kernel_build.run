#!/bin/bash +x
# Parameterized bash script for building kernels with Laminar CI. The
# input parameters $KCONFIG_TYPE and $ARCH are passed as arguments to
# laminarc like so:
#
# laminarc queue kernel_build KCONFIG_TYPE=allyesconfig ARCH=arm
#
# Since laminar automatically makes parameters into environment
# variables, no check for ARCH is needed.

IMAGE_TYPE=
VERSION=$(curl -s https://www.kernel.org/ | grep -A1 'mainline:' | grep -oP '(?<=strong>).*(?=</strong.*)')
KCONFIG_TYPE="${KCONFIG_TYPE:-defconfig}"
ARCH="${ARCH:-x86_64}"
CROSS="${CROSS:-aarch64-linux-gnu-}"
REMOTE="${REMOTE:-origin}"
BRANCH="${BRANCH:-v$VERSION}"

# Clean up the repo if it exists, then update it
if [[ -d "${WORKSPACE}/linux" ]]; then
    cd "${WORKSPACE}/linux"
    make clean
    git fetch "${REMOTE}"
    git checkout "${BRANCH}"
else
    echo "Something went wrong - no copy of the kernel repository present"
    exit 1
fi

rm .config

if [[ -n "$KCONFIG_TYPE" ]]; then
    echo "Setting up $KCONFIG_TYPE build"
    make "$KCONFIG_TYPE"
else
    echo "KCONFIG_TYPE not set, defaulting to 'defconfig'"
    make defconfig
fi

if [[ "${ARCH}" == "arm64" ]]; then
    CROSS="aarch64-linux-gnu-"
elif [[ "${ARCH}" == "riscv64" ]]; then
    CROSS="riscv64-linux-gnu-"
else
    CROSS=""
fi

echo "Building kernel using the following settings:"
echo "KCONFIG_TYPE=$KCONFIG_TYPE"
echo "ARCH=$ARCH"
echo "CROSS=$CROSS"
echo "REMOTE=$REMOTE"
echo "BRANCH=$BRANCH"

make CROSS_COMPILE="${CROSS}" -j$(nproc) | tee -a build.log

# get the result of make, not tee, and preserve it
RESULT="${PIPESTATUS[0]}"
RESULTSTR=

if [[ "${RESULT}" == 0 ]]; then
    RESULTSTR="PASS"
else
    RESULTSTR="FAIL"
fi

echo "RESULT: ${RESULTSTR}" >> "${ARCHIVE}"/build.summary
echo "ARCH: ${ARCH}" >> "${ARCHIVE}"/build.summary
echo "KCONFIG_TYPE: ${KCONFIG_TYPE}" >> "${ARCHIVE}"/build.summary
echo "REMOTE: ${REMOTE}" >> "${ARCHIVE}"/build.summary
echo "BRANCH: ${BRANCH}" >> "${ARCHIVE}"/build.summary

cp build.log "${ARCHIVE}"/build.log
cp .config "${ARCHIVE}"/build.config

if [[ "${RESULT}" == 0 ]]; then
    cp arch/"${ARCH}"/boot/Image.gz "${ARCHIVE}"
else
    echo "Build failed, so not copying kernel image to ${ARCHIVE}"
fi
